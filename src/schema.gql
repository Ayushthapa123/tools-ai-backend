# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type CAGData {
  category: String!
  items: [String!]!
}

type CAGList {
  data: [CAGData!]
  error: GraphQLError
  pagination: Pagination
  personalizedCustomerAvatar: String
}

input ChangePasswordInput {
  currentPassword: String!
  newPassword: String!
}

input CreateInputSchemaDto {
  schema: JSON!
  toolId: Float!
}

input CreateToolInput {
  description: String!
  handle: String!
  name: String!
  ownerId: Int!
  ranking: Int!
  shortDescription: String!
  slug: String
  thumbnailUrl: String!
  toolType: String!
  verifiedBySuperAdmin: Boolean!
  visibility: String!
}

input CreateUserInput {
  altPhoneNumber: String
  dateOfBirth: DateTime
  email: String!
  fullName: String!
  gender: GenderType
  phoneNumber: String
  profilePicture: String
  userType: UserType! = USER
}

type Ctx {
  sub: Float!
  userType: UserType!
}

input CustomerAvatarGeneratorInput {
  businessDescription: String!
  businessName: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type ForgotPasswordResponse {
  id: Float!
}

enum GenderType {
  BOYS
  GIRLS
  OTHERS
}

type GoogleOauthUrl {
  url: String!
}

type GraphQLError {
  code: String
  message: String!
  path: String
}

type InputSchema {
  data: InputSchemaData
  error: GraphQLError
  pagination: Pagination
}

type InputSchemaData {
  createdAt: DateTime!
  id: ID!
  schema: String!
  toolId: Int!
  updatedAt: DateTime!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

input LoginInput {
  email: String!
  password: String!
}

type LogoutResponse {
  message: String!
  success: Boolean!
}

type Mutation {
  changePassword(input: ChangePasswordInput!, userId: Float!): String!
  createInputSchema(createInputSchemaInput: CreateInputSchemaDto!): InputSchema!
  createTool(data: CreateToolInput!): Tool!
  createUser(input: CreateUserInput!): User!
  deleteTool(toolId: Float!): Tool!
  forgotPassword(email: String!): ForgotPasswordResponse!
  getCustomerAvatar(input: CustomerAvatarGeneratorInput!): CAGList!
  getTravelBudget(input: TravelBudgetCalculatorInput!): TBCList!
  getTravelChecklist(input: TravelChecklistGeneratorInput!): TCGList!
  getTravelDestination(input: TravelDestinationFinderInput!): TDFList!
  loginUser(input: LoginInput!): UsersAndToken!
  logout: LogoutResponse!
  refreshTokens: UsersHostelIdAndToken!
  removeInputSchema(id: Float!): InputSchema!
  resendVerificationMail(id: Float!): Boolean!
  resetPassword(input: ResetPasswordInput!): UsersAndToken!
  sendCustomEmail(email: String!, htmlContent: String!, name: String!, subject: String!): Boolean!
  signUpWithGoogle(input: SignupWithGoogleInput!): UsersAndToken!
  signupUser(input: SignupInput!): UsersAndToken!
  updateInputSchema(updateInputSchemaInput: UpdateInputSchemaDto!): InputSchema!
  updateTool(data: UpdateToolInput!, toolId: Float!): Tool!
  updateUser(input: UpdateUserInput!): User!
  verifyEmail(input: VerifyEmailInput!): VerifyEmailResponse!
  verifyTool(status: Boolean!, toolId: Int!): Tool!
}

type OutputSchemaData {
  createdAt: DateTime!
  id: ID!
  schema: String!
  toolId: Int!
  updatedAt: DateTime!
}

type Pagination {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  limit: Int!
  page: Int!
  total: Int!
  totalPages: Int!
}

type Query {
  findInputSchemaByToolId(toolId: Float!): InputSchema!
  getAllTools(isSuperAdmin: Boolean = false, pageNumber: Int! = 1, pageSize: Int! = 200): ToolArrayResponse!
  getGoogleAuthUrl: GoogleOauthUrl!
  getToolById(toolId: Float!): Tool
  getToolBySlug(slug: String!): Tool
  getToolsByUserToken(pageNumber: Int! = 1, pageSize: Int! = 30): ToolArrayResponse!
  getUserByAccessToken(accessToken: String!): User
  getUserById(id: Float!): User
  getUsers: [User!]!
  sendVerificationEmail(email: String!, name: String!, token: String!): Boolean!
}

input ResetPasswordInput {
  password: String!
  token: String!
}

input SignupInput {
  altPhoneNumber: String
  dateOfBirth: DateTime
  email: String!
  fullName: String!
  gender: GenderType
  password: String!
  phoneNumber: String
  profilePicture: String
  userType: UserType = USER
}

input SignupWithGoogleInput {
  token: String!
}

type TBCList {
  data: [TbcData!]
  error: GraphQLError
  pagination: Pagination
  personalizedTravelGuide: String
}

type TCGData {
  category: String!
  items: [String!]!
}

type TCGList {
  data: [TCGData!]
  error: GraphQLError
  pagination: Pagination
  personalizedTravelGuide: String
}

type TDFData {
  activitiesToDo: [String!]!
  destinationCountry: String!
  destinationPlace: String!
  expectedCost: String!
  shortGuide: String!
}

type TDFList {
  data: [TDFData!]
  error: GraphQLError
  pagination: Pagination
  personalizedTravelGuide: String
}

type TbcData {
  category: String!
  cost: Int!
  currency: String!
  per: String!
  shortGuide: String!
}

type Token {
  accessToken: ID!
  refreshToken: String!
}

type Tool {
  data: ToolData
  error: GraphQLError
  pagination: Pagination
}

type ToolArrayResponse {
  data: [ToolData!]!
  error: GraphQLError
}

type ToolData {
  createdAt: DateTime!
  deletedAt: DateTime
  description: String
  handle: String!
  id: ID!
  inputSchema: InputSchemaData
  name: String!
  outputSchema: OutputSchemaData
  owner: UserData
  ownerId: Int!
  ranking: Int
  shortDescription: String
  slug: String!
  thumbnailUrl: String
  toolMetadata: ToolMetadataData
  toolType: ToolType!
  updatedAt: DateTime!
  verifiedBySuperAdmin: Boolean!
  visibility: VisibilityType!
}

type ToolMetadataData {
  createdAt: DateTime!
  description: String!
  id: ID!
  keywords: String
  ogDescription: String
  ogImageUrl: String
  ogTitle: String
  title: String!
  toolId: Int!
  updatedAt: DateTime!
}

enum ToolType {
  CURD
  IO
}

input TravelBudgetCalculatorInput {
  accomodationType: String!
  date: DateTime!
  numberOfDays: Float!
  purpose: String!
  startCity: String!
  startCountry: String!
  travelCity: String!
  travelCountry: String!
  travelStyle: String!
}

input TravelChecklistGeneratorInput {
  date: DateTime!
  destinationCity: String!
  destinationCountry: String!
  purpose: String!
  startCity: String!
  startCountry: String!
  travelActivities: [String!]!
  travelCompanionType: String!
  travelDuration: String!
  travelType: String!
}

input TravelDestinationFinderInput {
  date: DateTime!
  purpose: String!
  startCity: String!
  startCountry: String!
  travelActivities: [String!]!
  travelBudgetUSD: String!
  travelCompanionType: String!
  travelDuration: String!
  travelType: String!
}

input UpdateInputSchemaDto {
  id: Float!
}

input UpdateToolInput {
  description: String
  handle: String
  id: Int!
  name: String
  ownerId: Int
  ranking: Int
  shortDescription: String
  slug: String
  thumbnailUrl: String
  toolType: String
  verifiedBySuperAdmin: Boolean
  visibility: String
}

input UpdateUserInput {
  altPhoneNumber: String
  dateOfBirth: DateTime
  email: String
  fullName: String
  gender: GenderType
  id: Int!
  phoneNumber: String
  profilePicture: String
  userType: UserType = USER
}

type User {
  data: UserData
  error: GraphQLError
  pagination: Pagination
}

type UserData {
  altPhoneNumber: String
  createdAt: DateTime!
  dateOfBirth: DateTime
  email: String!
  fullName: String!
  gender: GenderType
  hashedRefreshToken: String
  id: ID!
  isVerified: Boolean!
  passwordHash: String
  phoneNumber: String
  profilePicture: String
  tools: [ToolData!]
  updatedAt: DateTime!
  userType: UserType!
}

enum UserType {
  ADMIN
  CREATOR
  USER
}

type UsersAndToken {
  email: String!
  fullName: String!
  id: ID!
  token: Token!
  userType: String!
}

type UsersHostelIdAndToken {
  token: Token!
  user: UserData!
}

input VerifyEmailInput {
  token: String!
}

type VerifyEmailResponse {
  id: Float!
}

enum VisibilityType {
  PRIVATE
  PUBLIC
}