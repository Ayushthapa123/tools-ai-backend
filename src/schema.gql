# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Address {
  data: AddressData
  error: GraphQLError
}

type AddressData {
  city: String!
  country: String!
  createdAt: DateTime!
  hostelId: Int!
  id: ID!
  latitude: Float
  longitude: Float
  street: String
  subCity: String
  updatedAt: DateTime!
}

type Amenities {
  data: AmenitiesData
  error: GraphQLError
}

type AmenitiesData {
  amenities: JSON!
  hostelId: Int!
  id: ID!
}

type Booking {
  data: BookingData
  error: GraphQLError
}

input BookingConfirmationEmailDto {
  checkInDate: String!
  checkOutDate: String!
  guestName: String!
  hostelName: String!
  paidAmount: Float!
  roomName: [Int!]!
}

type BookingConfirmationMailData {
  name: String!
  roomNumbers: [Int!]!
}

type BookingData {
  bookingKey: String!
  createdAt: DateTime!
  endDate: DateTime!
  guest: UserData!
  guestId: Int!
  id: ID!
  paymentPlatformName: PaymentPlatformName!
  roomId: Int!
  startDate: DateTime!
  status: BookingStatus!
  updatedAt: DateTime!
}

type BookingList {
  data: [BookingData!]
  error: GraphQLError
}

enum BookingStatus {
  CANCELLED
  CONFIRMED
  PENDING
}

type BookingSummary {
  price: Float
  priceType: String
  roomId: Float!
  totalPriceOfRoom: Float
}

input ChangePasswordInput {
  currentPassword: String!
  newPassword: String!
}

type ConfirmBooking {
  count: String!
}

type ContactDetail {
  data: ContactDetailData
  error: GraphQLError
}

type ContactDetailData {
  altPhone: String
  createdAt: DateTime!
  email: String!
  hostelId: Int!
  id: ID!
  phone: String!
  updatedAt: DateTime!
}

input CreateAddressInput {
  city: String
  country: String!
  hostelId: Float!
  latitude: Float
  longitude: Float
  street: String
  subCity: String
}

input CreateAmenityInput {
  amenity: String!
  hostelId: Int!
}

input CreateBookingInput {
  bookingKey: String!
  endDate: DateTime!
  guestId: Int!
  paymentPlatformName: String!
  roomId: Int!
  startDate: DateTime!
  status: BookingStatus!
}

input CreateContactInput {
  altPhone: String
  email: String!
  hostelId: Float!
  phone: String!
}

input CreateDynamicPriceRuleInput {
  amount: Int!
  description: String
  endDate: DateTime!
  isActive: Boolean! = true
  isWeekend: Boolean! = false
  name: String!
  priority: Int! = 0
  roomId: Int!
  startDate: DateTime!
}

input CreateGalleryInput {
  caption: String!
  hostelId: Float!
  url: String!
}

input CreateHostelInput {
  description: String
  name: String!
}

input CreatePriceInput {
  baseAmountPerDay: Int!
  baseAmountPerMonth: Int!
  currency: Currency!
  discountAmount: Int
  discountType: DiscountType
  isDiscountActive: Boolean! = false
  isDynamicPricing: Boolean! = false
  roomId: Int!
}

input CreateRoomAmenityInput {
  amenity: JSON!
  roomId: Int!
}

input CreateRoomImageInput {
  caption: String!
  roomId: Float!
  url: String!
}

input CreateRoomInput {
  attachBathroom: Boolean
  capacity: RoomCapacity!
  caption: String!
  description: String
  hostelId: Int!
  images: [RoomImageInput!]
  maxOccupancy: String
  price: CreatePriceInput
  roomNumber: String
  status: RoomStatus!
}

input CreateRulesInput {
  hostelId: Int!
  rules: JSON!
}

input CreateSearchQueriesInput {
  city: String!
  country: String!
  subCity: String
}

input CreateServiceDto {
  hostelId: Float!
  services: JSON!
}

input CreateUserInput {
  altPhoneNumber: String
  city: String
  createdAt: DateTime!
  dateOfBirth: DateTime
  deletedAt: DateTime
  email: String!
  fullName: String!
  gender: Gender
  hashedRefreshToken: String
  hostelId: Float
  isVerified: Boolean! = false
  passwordHash: String
  phoneNumber: String
  profilePicture: String
  updatedAt: DateTime!
  userType: UserType! = HOSTEL_OWNER
}

type Ctx {
  hostelId: Float
  sub: Float!
  userType: UserType!
}

enum Currency {
  NPR
  USD
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum DiscountType {
  FIXED
  PERCENTAGE
}

type DynamicPricingRule {
  data: DynamicPricingRuleData
  error: GraphQLError
}

type DynamicPricingRuleData {
  amount: Int!
  createdAt: DateTime!
  description: String
  endDate: DateTime!
  id: ID!
  isActive: Boolean!
  isWeekend: Boolean!
  name: String!
  priority: Int!
  roomId: Int!
  startDate: DateTime!
  updatedAt: DateTime!
}

type DynamicPricingRuleList {
  data: [DynamicPricingRuleData!]
  error: GraphQLError
}

type FoodMenuData {
  createdAt: DateTime!
  day: WeekDays!
  dinner: String
  dinnerTime: String
  hostelId: Int!
  id: ID!
  lunch: String
  lunchTime: String
  snacks: String
  snacksTime: String
  updatedAt: DateTime!
}

type ForgotPasswordResponse {
  id: Float!
}

type Gallery {
  data: GalleryData
  error: GraphQLError
}

type GalleryData {
  caption: String
  createdAt: DateTime!
  hostelId: Int!
  id: ID!
  isSelected: Boolean
  type: GalleryType!
  updatedAt: DateTime!
  url: String!
}

type GalleryList {
  data: [GalleryData!]
  error: GraphQLError
}

enum GalleryType {
  BATHROOM
  BUILDING
  CELEBRATIONS
  COVER
  FOOD
  KITCHEN
  LOGO
  OTHER
  PROFILE
  REVIEW
  ROOM
}

enum Gender {
  BOYS
  GIRLS
  OTHERS
}

type GoogleOauthUrl {
  url: String!
}

type GraphQLError {
  code: String
  message: String!
  path: String
}

type Hostel {
  data: HostelData
  error: GraphQLError
}

type HostelArrayResponse {
  data: [HostelData!]!
  error: GraphQLError
}

type HostelData {
  address: AddressData
  amenities: AmenitiesData
  contact: ContactDetailData
  createdAt: DateTime!
  deletedAt: DateTime
  description: String
  foodMenu: [FoodMenuData!]!
  gallery: [GalleryData!]!
  genderType: HostelGenderType!
  hostelRules: HostelRulesData
  hostelSettings: HostelSettingData
  hostelType: HostelType!
  id: ID!
  name: String!
  nearbyPlaces: [NearbyPlaceData!]!
  owner: UserData
  ownerId: Int!
  ranking: Int
  rooms: [RoomData!]!
  service: ServiceData
  slug: String!
  social: SocialData
  telegramId: String
  updatedAt: DateTime!
  verifiedByCommunityOwner: Boolean!
  verifiedBySuperAdmin: Boolean!
  whatsappId: String
}

enum HostelGenderType {
  BOTH
  BOYS
  GIRLS
}

type HostelRules {
  data: HostelRulesData
  error: GraphQLError
}

type HostelRulesData {
  hostelId: Int!
  id: ID!
  rules: JSON!
}

type HostelSettingData {
  active: Boolean!
  allowBooking: Boolean!
  allowComments: Boolean!
  allowMessages: Boolean!
  allowPrivateFeedbacks: Boolean!
  allowRating: Boolean!
  createdAt: DateTime!
  currency: String
  deActivate: Boolean!
  fontSize: Int!
  hostelId: Int!
  id: ID!
  updatedAt: DateTime!
  visibility: VisibilityType!
}

enum HostelType {
  BOTH
  PG
  STAY
  TRAVEL
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

input LoginInput {
  email: String!
  password: String!
}

type LogoutResponse {
  message: String!
  success: Boolean!
}

type Mutation {
  changePassword(input: ChangePasswordInput!, userId: Float!): String!
  confirmBooking(bookingKey: String!): ConfirmBooking!
  createAddress(data: CreateAddressInput!): Address!
  createAmenity(createAmenityInput: CreateAmenityInput!): Amenities!
  createBooking(createBookingInput: CreateBookingInput!): Booking!
  createContact(data: CreateContactInput!): ContactDetail!
  createGallery(data: CreateGalleryInput!): Gallery!
  createHostel(data: CreateHostelInput!): Hostel!
  createPrice(createPriceInput: CreatePriceInput!): Price!
  createPriceRule(createPriceRuleInput: CreateDynamicPriceRuleInput!): DynamicPricingRule!
  createRoom(createRoomInput: CreateRoomInput!): Room!
  createRoomAmenity(createAmenityInput: CreateRoomAmenityInput!): RoomAmenity!
  createRoomImage(data: CreateRoomImageInput!): RoomImage!
  createRules(createRulesInput: CreateRulesInput!): HostelRules!
  createSearchQuery(createSearchQueriesInput: CreateSearchQueriesInput!): SearchQuery!
  createService(createServiceInput: CreateServiceDto!): Service!
  createUser(input: CreateUserInput!): User!
  deleteGallery(galleryId: Int!): Gallery!
  deleteHostel(hostelId: Float!): Hostel!
  deleteRoomImage(roomImageId: Int!): RoomImage!
  deleteRules(rulesId: Int!): HostelRules!
  deleteSearchQuery(searchQueryId: Int!): SearchQuery!
  forgotPassword(email: String!): ForgotPasswordResponse!
  loginUser(input: LoginInput!): UsersAndToken!
  logout: LogoutResponse!
  refreshTokens: UsersHostelIdAndToken!
  removeAmenity(id: Int!): Amenities!
  removeBooking(id: Float!): Booking!
  removePrice(id: Int!): Price!
  removePriceRule(id: Int!): DynamicPricingRule!
  removeRoom(id: Int!): Room!
  removeRoomAmenity(roomAmenityId: Int!): RoomAmenity!
  removeService(id: Float!): Service!
  resendVerificationMail(id: Float!): Boolean!
  resetPassword(input: ResetPasswordInput!): UsersAndToken!
  selectGallery(galleryId: Int!, hostelId: Int!): Gallery!
  sendMailAfterBooking(data: BookingConfirmationEmailDto!, email: String!): Boolean!
  signUpWithGoogle(input: SignupWithGoogleInput!): UsersAndToken!
  signupUser(input: SignupInput!): UsersAndToken!
  updateAddress(addressId: Float!, data: UpdateAddressInput!): Address!
  updateAmenity(updateAmenityInput: UpdateAmenityInput!): Amenities!
  updateBooking(id: Float!, updateBookingInput: UpdateBookingInput!): Booking!
  updateContact(contactId: Float!, data: UpdateContactInput!): ContactDetail!
  updateGallery(data: UpdateGalleryInput!, galleryId: Int!): Gallery!
  updateHostel(data: UpdateHostelInput!, hostelId: Float!): Hostel!
  updatePrice(updatePriceInput: UpdatePriceInput!): Price!
  updatePriceRule(updatePriceInput: UpdateDynamicPriceRuleInput!): DynamicPricingRule!
  updateRoom(updateRoomInput: UpdateRoomInput!): Room!
  updateRoomAmenity(updateAmenityInput: UpdateRoomAmenityInput!): RoomAmenity!
  updateRoomImage(data: UpdateRoomImageInput!, roomImageId: Int!): RoomImage!
  updateRules(rulesId: Int!, updateRulesInput: UpdateRulesInput!): HostelRules!
  updateSearchQuery(searchQueryId: Int!, updateSearchQueriesInput: UpdateSearchQueriesInput!): SearchQuery!
  updateService(updateServiceInput: UpdateServiceDto!): Service!
  updateUser(input: UpdateUserInput!): User!
  verifyEmail(input: VerifyEmailInput!): VerifyEmailResponse!
  verifyHostel(hostelId: Int!, status: Boolean!): Hostel!
}

type NearbyPlaceData {
  description: String!
  hostelId: Int!
  id: ID!
  name: String!
}

enum PaymentPlatformName {
  ESEWA
  KHALTI
  STRIPE
}

type Price {
  data: PriceData
  error: GraphQLError
}

type PriceData {
  baseAmountPerDay: Int!
  baseAmountPerMonth: Int!
  createdAt: DateTime!
  currency: Currency!
  discountAmount: Int
  discountType: DiscountType
  id: ID!
  isDiscountActive: Boolean!
  isDynamicPricing: Boolean!
  roomId: Int!
  updatedAt: DateTime!
}

type Query {
  booking(id: Float!): Booking!
  bookings: BookingList!
  bookingsByHostel: BookingList!
  bookingsWithKey(bookingKey: String!): BookingList!
  checkValidBooking(endDate: DateTime!, roomIds: [Int!]!, startDate: DateTime!): ValidInvalidBooking!
  findAllAmenities: [RoomAmenity!]!
  findAmenityByHostelId(hostelId: Int!): Amenities!
  findAmenityByRoomId(roomId: Int!): RoomAmenity!
  findAnAmenityById(id: Int!): RoomAmenity!
  findRoomsByRoomIds(roomIds: [Int!]!): BookingConfirmationMailData!
  findServiceByHostelId(hostelId: Float!): Service!
  getAddressByHostelId(hostelId: Float!): Address
  getAllHostels(pageNumber: Int! = 1, pageSize: Int! = 10): HostelArrayResponse!
  getAllSearchQueries: [SearchQuery!]!
  getCitySearchSuggestions(query: String!): [SearchQuery!]
  getContactByHostelId(hostelId: Float!): ContactDetail
  getGalleryByHostelId(hostelId: Int!): GalleryList
  getGoogleAuthUrl: GoogleOauthUrl!
  getHostelById(hostelId: Float!): Hostel
  getHostelBySlug(checkInDate: DateTime, checkOutDate: DateTime, slug: String!): Hostel
  getHostelByToken: Hostel
  getHostelSearchSuggestions(query: String!): [SearchQuery!]
  getHostelsBySearch(input: SearchHostelInput!): [Hostel!]!
  getRoomImagesByRoomId(roomId: Int!): RoomImageList
  getRulesByHostel: HostelRules!
  getRulesById(rulesId: Int!): HostelRules!
  getToleSearchSuggestions(query: String!): [SearchQuery!]
  getUserByAccessToken(accessToken: String!): User
  getUserById(id: Float!): User
  getUsers: [User!]!
  myBookings: BookingList!
  price(id: Int!): Price!
  priceByRoom(roomId: Int!): Price!
  priceRule(id: Int!): DynamicPricingRule!
  priceRulesByRoom(roomId: Int!): DynamicPricingRuleList!
  prices: [Price!]!
  pricesRules: DynamicPricingRuleList!
  room(id: Int!): Room!
  roomBookings(roomId: Float!): BookingList!
  rooms: [Room!]!
  roomsByHostel: Room!
  searchQueries(query: String!): [SearchQuery!]!
  searchQuery(searchQueryId: Int!): SearchQuery!
  sendVerificationEmail(email: String!, token: String!): Boolean!
}

input ResetPasswordInput {
  password: String!
  token: String!
}

type Room {
  data: RoomData
  error: GraphQLError
}

type RoomAmenity {
  data: RoomAmenityData
  error: GraphQLError
}

type RoomAmenityData {
  amenity: JSON!
  createdAt: DateTime!
  id: ID!
  roomId: Int!
  updatedAt: DateTime!
}

enum RoomCapacity {
  EIGHT_BED
  FIVE_BED
  FOUR_BED
  MULTI_BED
  ONE_BED
  SEVEN_BED
  SIX_BED
  THREE_BED
  TWO_BED
}

type RoomData {
  attachBathroom: Boolean
  capacity: RoomCapacity!
  caption: String!
  createdAt: DateTime!
  description: String
  dynamicPricingRule: [DynamicPricingRuleData!]
  hostelId: Int!
  id: ID!
  image: [RoomImageData!]!
  maxOccupancy: String
  price: PriceData
  roomAmenity: RoomAmenityData
  roomAmenityId: Int
  roomNumber: String
  status: RoomStatus!
  updatedAt: DateTime!
}

type RoomImage {
  data: RoomImageData
  error: GraphQLError
}

type RoomImageData {
  caption: String
  createdAt: DateTime!
  id: ID!
  roomId: Int!
  updatedAt: DateTime!
  url: String!
}

input RoomImageInput {
  caption: String
  url: String!
}

type RoomImageList {
  data: [RoomImageData!]
  error: GraphQLError
}

enum RoomStatus {
  AVAILABLE
  BOOKED
  IDLE
  INACTIVE
}

input SearchHostelInput {
  checkInDate: DateTime
  checkOutDate: DateTime
  city: String
  latitude: Float
  longitude: Float
  maxPrice: Float
  minRating: Float
  pageNumber: Float!
  subCity: String
}

type SearchQuery {
  data: [SearchQueryData!]
  error: GraphQLError
}

type SearchQueryData {
  city: String!
  country: String!
  createdAt: DateTime!
  id: ID!
  subCity: String
  updatedAt: DateTime!
}

type Service {
  data: ServiceData
  error: GraphQLError
}

type ServiceData {
  hostelId: Int!
  id: ID!
  services: JSON!
}

input SignupInput {
  altPhoneNumber: String
  city: String
  createdAt: DateTime
  dateOfBirth: DateTime
  deletedAt: DateTime
  email: String!
  fullName: String!
  gender: Gender
  hashedRefreshToken: String
  hostelId: Float
  isVerified: Boolean = false
  password: String!
  passwordHash: String
  phoneNumber: String
  profilePicture: String
  updatedAt: DateTime
  userType: String!
}

input SignupWithGoogleInput {
  token: String!
}

type SocialData {
  createdAt: DateTime!
  facebook: String
  hostelId: Int!
  id: ID!
  instaGram: String
  map: String
  tiktok: String
  updatedAt: DateTime!
  youTube: String
}

type Token {
  accessToken: ID!
  refreshToken: String!
}

input UpdateAddressInput {
  id: Float!
}

input UpdateAmenityInput {
  amenity: String
  hostelId: Int
  id: Int!
}

input UpdateBookingInput {
  bookingKey: String
  endDate: DateTime
  guestId: Int
  id: Int!
  paymentPlatformName: String
  roomId: Int
  startDate: DateTime
  status: BookingStatus
}

input UpdateContactInput {
  altPhone: String
  email: String
  phone: String
}

input UpdateDynamicPriceRuleInput {
  amount: Int
  description: String
  endDate: DateTime
  id: Int!
  isActive: Boolean = true
  isWeekend: Boolean = false
  name: String
  priority: Int = 0
  roomId: Int
  startDate: DateTime
}

input UpdateGalleryInput {
  caption: String
  hostelId: Float
  id: Float!
  url: String
}

input UpdateHostelInput {
  description: String
  moderatedByCommunityOwner: Boolean
  moderatedBySuperAdmin: Boolean
  name: String
  ownerId: Int
  slug: String
}

input UpdatePriceInput {
  baseAmountPerDay: Int
  baseAmountPerMonth: Int
  currency: Currency
  discountAmount: Int
  discountType: DiscountType
  id: Int!
  isDiscountActive: Boolean = false
  isDynamicPricing: Boolean = false
  roomId: Int
}

input UpdateRoomAmenityInput {
  amenity: JSON
  id: Int!
  roomId: Int
}

input UpdateRoomImageInput {
  caption: String!
  id: Float!
  url: String!
}

input UpdateRoomInput {
  attachBathroom: Boolean
  capacity: RoomCapacity
  caption: String
  description: String
  hostelId: Int
  id: Int!
  images: [RoomImageInput!]
  maxOccupancy: String
  price: CreatePriceInput
  roomNumber: String
  status: RoomStatus
}

input UpdateRulesInput {
  rules: String
}

input UpdateSearchQueriesInput {
  city: String
  country: String
  subCity: String
}

input UpdateServiceDto {
  id: Float!
}

input UpdateUserInput {
  altPhoneNumber: String
  city: String
  createdAt: DateTime
  dateOfBirth: DateTime
  deletedAt: DateTime
  email: String
  fullName: String
  gender: Gender
  hashedRefreshToken: String
  hostelId: Float
  id: Int!
  isVerified: Boolean = false
  passwordHash: String
  phoneNumber: String
  profilePicture: String
  updatedAt: DateTime
  userType: UserType = HOSTEL_OWNER
}

type User {
  data: UserData
  error: GraphQLError
}

type UserData {
  altPhoneNumber: String
  city: String
  createdAt: DateTime!
  dateOfBirth: DateTime
  deletedAt: DateTime
  email: String!
  fullName: String!
  gender: Gender
  hashedRefreshToken: String
  hostelId: Int
  id: ID!
  isVerified: Boolean!
  passwordHash: String
  phoneNumber: String
  profilePicture: String
  updatedAt: DateTime!
  userType: UserType!
}

enum UserType {
  COMMUNITY_OWNER
  HOSTEL_OWNER
  OTHERS
  STUDENT
  SUPERADMIN
  SUPPLIERS
}

type UsersAndToken {
  email: String!
  fullName: String!
  id: ID!
  token: Token!
  userType: UserType!
}

type UsersHostelIdAndToken {
  token: Token!
  user: UserData!
}

type ValidInvalidBooking {
  bookingSummary: [BookingSummary!]
  isValid: Boolean!
  message: String
  totalDays: Float
  totalPrice: Float
}

input VerifyEmailInput {
  token: String!
}

type VerifyEmailResponse {
  id: Float!
}

enum VisibilityType {
  ALL
  ONLY_ME
  STUDENTS_ONLY
}

enum WeekDays {
  FRIDAY
  MONDAY
  SATURDAY
  SUNDAY
  THURSDAY
  TUESDAY
  WEDNESDAY
}