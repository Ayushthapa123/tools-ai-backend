# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

enum AiCapability {
  ANALYTICS_BI
  ANOMALY_DETECTION
  CAUSAL_INFERENCE
  CODE_AI
  COMPUTER_VISION
  EDGE_AI
  FOUNDATION_MODEL
  GENERATIVE_AUDIO
  GENERATIVE_IMAGE
  GENERATIVE_TEXT
  GENERATIVE_VIDEO
  KNOWLEDGE_AI
  MLOPS_OBSERVABILITY
  MULTIMODAL_UNDERSTANDING
  NLP_UNDERSTANDING
  OCR_DOCUMENT_AI
  OPTIMIZATION_PLANNING
  OTHER
  PRIVACY_PRESERVING_ML
  RECOMMENDATION
  ROBOTICS_CONTROL
  SEARCH_RETRIEVAL
  SECURITY_ML
  SPEAKER_TECH
  SPEECH_ASR
  SPEECH_TTS
  SYNTHETIC_DATA
  TIME_SERIES_FORECASTING
}

enum AiType {
  ANALYTICS_AI
  AUTOMATION_AI
  CODE_AI
  COMPUTER_VISION
  CONVERSATIONAL_AI
  GENERATIVE_AI
  MARKETING_AI
  OTHER
  RECOMMENDATION_AI
  SEARCH_RETRIEVAL_AI
  SECURITY_AI
  SPEECH_AI
}

type CAGData {
  category: String!
  items: [String!]!
}

type CAGList {
  data: [CAGData!]
  error: GraphQLError
  pagination: Pagination
  personalizedCustomerAvatar: String
}

input ChangePasswordInput {
  currentPassword: String!
  newPassword: String!
}

input CreateInputSchema {
  schema: String!
  toolId: Float!
}

input CreateListedAiToolInput {
  aiCapabilities: [AiCapability!]!
  aiType: [AiType!]!
  delivery: [Delivery!]!
  domains: [Domain!]!
  featured: Boolean!
  features: [String!]!
  integrationOptions: [IntegrationOption!]!
  keywords: [String!]!
  listedBy: ListedBy
  logoUrl: String
  modalities: [Modality!]!
  name: String!
  ownerEmail: String
  platforms: [PlatformType!]!
  popularityScore: Int!
  pricingType: [PricingType!]!
  productType: [ProductType!]!
  publishedAt: DateTime
  shortDescription: String!
  toolUserTypes: [ToolUserType!]!
  useCases: [String!]!
  usps: [String!]!
  verified: Boolean!
  videoUrl: String
  websiteUrl: String!
}

input CreateToolInput {
  description: String!
  handle: String
  name: String!
  ownerId: Int
  ranking: Int = 0
  shortDescription: String!
  slug: String
  thumbnailUrl: String
  toolType: String = "IO"
  verifiedBySuperAdmin: Boolean = false
  visibility: String = "PUBLIC"
}

input CreateToolMetaDataDto {
  description: String!
  keywords: String!
  ogDescription: String!
  ogImageUrl: String!
  ogTitle: String!
  title: String!
  toolId: Float!
}

input CreateUserInput {
  altPhoneNumber: String
  dateOfBirth: DateTime
  email: String!
  fullName: String!
  gender: GenderType
  phoneNumber: String
  profilePicture: String
  userType: UserType! = USER
  username: String!
}

type Ctx {
  sub: Float!
  userType: UserType!
}

input CustomerAvatarGeneratorInput {
  businessDescription: String!
  businessName: String!
}

type DNGData {
  category: String!
  items: [DomainItem!]!
}

type DNGList {
  data: [DNGData!]
  error: GraphQLError
  message: String
  pagination: Pagination
  personalizedGuide: String
  success: Boolean
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum Delivery {
  API
  EDGE_DEVICE
  MARKETPLACE_PLUGIN
  MODEL_WEIGHTS
  ON_PREM
  OPEN_SOURCE
  SAAS
  SDK
}

enum Domain {
  AGRICULTURE
  AUDIO_MUSIC
  AUTOMATION
  BUSINESS
  CHATBOT
  CLOUD
  CONTENT_CREATION
  CUSTOMER_SUPPORT
  DATA_ANALYTICS
  DESIGN
  DEVELOPMENT
  ECOMMERCE
  EDUCATION
  ENTERTAINMENT
  FINANCE
  GAMING
  HEALTHCARE
  HUMAN_RESOURCES
  IMAGE_GENERATION
  LEGAL
  MANUFACTURING
  MARKETING
  OPERATIONS
  OTHER
  PRODUCTIVITY
  RESEARCH
  SALES
  SECURITY
  SOCIAL_MEDIA
  TRANSLATION
  VIDEO_CREATION
  VIRTUAL_ASSISTANT
  WRITING
}

type DomainItem {
  available: Boolean!
  item: String!
  price: Float
}

input DomainNameGeneratorInput {
  businessDescription: String!
  businessName: String!
  customPrompt: String!
  domainExtension: String!
}

type ForgotPasswordResponse {
  id: Float!
}

enum GenderType {
  BOYS
  GIRLS
  OTHERS
}

type GoogleOauthUrl {
  url: String!
}

type GraphQLError {
  code: String
  message: String!
  path: String
}

type IOGeneric {
  data: IOGenericData
  error: GraphQLError
  pagination: Pagination
}

type IOGenericData {
  htmlResponse: String!
}

input IOGenericInput {
  data: JSON!
  schema: JSON!
}

type InputSchema {
  data: InputSchemaData
  error: GraphQLError
  pagination: Pagination
}

type InputSchemaData {
  createdAt: DateTime!
  id: ID!
  schema: JSON!
  toolId: Int!
  updatedAt: DateTime!
}

enum IntegrationOption {
  API_CONNECTOR
  CLOUD_DRIVE
  CRM
  DATABASE
  FIGMA
  GOOGLE_WORKSPACE
  HUBSPOT
  IDE_PLUGIN
  INTEGROMAT
  MICROSOFT_TEAMS
  NOTION
  OTHER
  SALESFORCE
  SHOPIFY
  SLACK
  WORDPRESS
  ZAPIER
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type ListedAiTool {
  data: ListedAiToolData
  error: GraphQLError
  pagination: Pagination
}

type ListedAiToolArrayResponse {
  data: [ListedAiToolData!]!
  error: GraphQLError
}

type ListedAiToolData {
  aiCapabilities: [AiCapability!]!
  aiType: [AiType!]!
  createdAt: DateTime!
  delivery: [Delivery!]!
  domains: [Domain!]!
  featured: Boolean!
  features: [String!]!
  id: ID!
  integrationOptions: [IntegrationOption!]!
  keywords: [String!]!
  listedBy: ListedBy!
  logoUrl: String
  modalities: [Modality!]!
  name: String!
  platforms: [PlatformType!]!
  popularityScore: Int!
  pricingType: [PricingType!]!
  productType: [ProductType!]!
  publishedAt: DateTime
  shortDescription: String!
  slug: String!
  toolUserTypes: [ToolUserType!]!
  updatedAt: DateTime!
  useCases: [String!]!
  usps: [String!]!
  verified: Boolean!
  videoUrl: String
  websiteUrl: String
}

type ListedAiToolList {
  data: [ListedAiToolData!]
  error: GraphQLError
  pagination: Pagination
}

enum ListedBy {
  GEMENAI
  GPT
  USER
}

input LoginInput {
  email: String!
  password: String!
}

type LogoutResponse {
  message: String!
  success: Boolean!
}

enum Modality {
  AUDIO
  GEOSPATIAL
  GRAPH
  IMAGE
  MULTIMODAL
  SENSOR_DATA
  TABULAR
  TEXT
  THREE_D
  TIME_SERIES
  VIDEO
}

type Mutation {
  changePassword(input: ChangePasswordInput!, userId: Float!): String!
  createInputSchema(createInputSchemaInput: CreateInputSchema!): InputSchema!
  createListedAiTool(data: CreateListedAiToolInput!): ListedAiTool!
  createListedAiToolAnonymously(data: CreateListedAiToolInput!): ListedAiTool!
  createListedAiToolFromArray(userId: Int! = 1): ListedAiTool!
  createTool(data: CreateToolInput!): Tool!
  createToolMetaData(createToolMetaDataInput: CreateToolMetaDataDto!): ToolMetadata!
  createUser(input: CreateUserInput!): User!
  deleteListedAiTool(toolId: Float!): ListedAiTool!
  deleteTool(toolId: Float!): Tool!
  forgotPassword(email: String!): ForgotPasswordResponse!
  getCustomerAvatar(input: CustomerAvatarGeneratorInput!): CAGList!
  getDomainNames(input: DomainNameGeneratorInput!): DNGList!
  getTravelBudget(input: TravelBudgetCalculatorInput!): TBCList!
  getTravelChecklist(input: TravelChecklistGeneratorInput!): TCGList!
  getTravelDestination(input: TravelDestinationFinderInput!): TDFList!
  loginUser(input: LoginInput!): UsersAndToken!
  logout: LogoutResponse!
  processGenericIO(input: IOGenericInput!): IOGeneric!
  refreshTokens: UsersHostelIdAndToken!
  removeInputSchema(id: Float!): InputSchema!
  removeToolMetaData(id: Float!): ToolMetadata!
  resendVerificationMail(id: Float!): Boolean!
  resetPassword(input: ResetPasswordInput!): UsersAndToken!
  sendCustomEmail(email: String!, htmlContent: String!, name: String!, subject: String!): Boolean!
  signUpWithGoogle(input: SignupWithGoogleInput!): UsersAndToken!
  signupUser(input: SignupInput!): UsersAndToken!
  updateInputSchema(updateInputSchemaInput: UpdateInputSchema!): InputSchema!
  updateListedAiTool(data: UpdateListedAiToolInput!, toolId: Float!): ListedAiTool!
  updateListedAiToolFromArrayForVideoUrl(userId: Int! = 1): ListedAiTool!
  updateTool(data: UpdateToolInput!, toolId: Float!): Tool!
  updateToolMetaData(updateToolMetaDataInput: UpdateToolMetaDataDto!): ToolMetadata!
  updateUser(input: UpdateUserInput!): User!
  verifyEmail(input: VerifyEmailInput!): VerifyEmailResponse!
  verifyListedAiTool(status: Boolean!, toolId: Int!): ListedAiTool!
  verifyTool(status: Boolean!, toolId: Int!): Tool!
}

type OutputSchemaData {
  createdAt: DateTime!
  id: ID!
  schema: String!
  toolId: Int!
  updatedAt: DateTime!
}

type Pagination {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  limit: Int!
  page: Int!
  total: Int!
  totalPages: Int!
}

enum PlatformType {
  API
  DESKTOP
  EXTENSION
  MOBILE
  OTHER
  PLUGIN
  SDK
  WEB
  WEBHOOK
}

enum PricingType {
  CUSTOM
  FREE
  FREEMIUM
  PAID
  TRIAL
}

enum ProductType {
  AGENT
  APPLICATION
  DATASET
  FRAMEWORK
  HARDWARE
  MODEL
  OTHER
  SERVICE
  TEMPLATE
  TOOLKIT
}

type Query {
  findInputSchemaByToolId(toolId: Float!): InputSchema!
  getAiToolsByDomain(domain: String!, limit: Int! = 20): ListedAiToolList!
  getAllListedAiTools(isSuperAdmin: Boolean = false, pageNumber: Int! = 1, pageSize: Int! = 200): ListedAiToolArrayResponse!
  getAllTools(isSuperAdmin: Boolean = false, pageNumber: Int! = 1, pageSize: Int! = 200): ToolArrayResponse!
  getFeaturedAiTools(limit: Int! = 10): ListedAiToolList!
  getGoogleAuthUrl: GoogleOauthUrl!
  getListedAiToolById(toolId: Float!): ListedAiTool
  getListedAiToolBySlug(slug: String!): ListedAiTool
  getListedAiToolsByUserToken(pageNumber: Int! = 1, pageSize: Int! = 30): ListedAiToolArrayResponse!
  getListedAiToolsByUserType(pageNumber: Int! = 1, pageSize: Int! = 6, userType: ToolUserType!): ListedAiToolArrayResponse!
  getListedAiToolsWithHighPopularityScore(isSuperAdmin: Boolean = false, pageNumber: Int! = 1, pageSize: Int! = 6): ListedAiToolArrayResponse!
  getPopularAiTools(limit: Int! = 10): ListedAiToolList!
  getToolById(toolId: Float!): Tool
  getToolBySlug(slug: String!): Tool
  getToolMetaDataByToolId(toolId: Float!): ToolMetadata!
  getToolsByUserToken(pageNumber: Int! = 1, pageSize: Int! = 30): ToolArrayResponse!
  getUserByAccessToken(accessToken: String!): User
  getUserById(id: Float!): User
  getUsers: [User!]!
  searchListedAiTools(input: SearchListedAiToolInput!): ListedAiToolList!
  sendVerificationEmail(email: String!, name: String!, token: String!): Boolean!
}

input ResetPasswordInput {
  password: String!
  token: String!
}

input SearchListedAiToolInput {
  aiCapabilities: [AiCapability!]
  aiTypes: [AiType!]
  delivery: [Delivery!]
  domains: [Domain!]
  endDate: DateTime
  featured: Boolean
  integrationOptions: [IntegrationOption!]
  keywords: [String!]
  maxPopularityScore: Int
  minPopularityScore: Int
  modalities: [Modality!]
  pageNumber: Int! = 1
  pageSize: Int! = 20
  platforms: [PlatformType!]
  pricingTypes: [PricingType!]
  productTypes: [ProductType!]
  researchMode: Boolean
  searchTerm: String
  sortBy: String
  sortOrder: String
  startDate: DateTime
  toolUserTypes: [ToolUserType!]
  verified: Boolean
}

input SignupInput {
  altPhoneNumber: String
  dateOfBirth: DateTime
  email: String!
  fullName: String!
  gender: GenderType
  password: String!
  phoneNumber: String
  profilePicture: String
  userType: UserType = USER
  username: String
}

input SignupWithGoogleInput {
  token: String!
}

type TBCList {
  data: [TbcData!]
  error: GraphQLError
  pagination: Pagination
  personalizedTravelGuide: String
}

type TCGData {
  category: String!
  items: [String!]!
}

type TCGList {
  data: [TCGData!]
  error: GraphQLError
  pagination: Pagination
  personalizedTravelGuide: String
}

type TDFData {
  activitiesToDo: [String!]!
  destinationCountry: String!
  destinationPlace: String!
  expectedCost: String!
  shortGuide: String!
}

type TDFList {
  data: [TDFData!]
  error: GraphQLError
  pagination: Pagination
  personalizedTravelGuide: String
}

type TbcData {
  category: String!
  cost: Int!
  currency: String!
  per: String!
  shortGuide: String!
}

type Token {
  accessToken: ID!
  refreshToken: String!
}

type Tool {
  data: ToolData
  error: GraphQLError
  pagination: Pagination
}

type ToolArrayResponse {
  data: [ToolData!]!
  error: GraphQLError
}

type ToolData {
  createdAt: DateTime!
  deletedAt: DateTime
  description: String
  handle: String!
  id: ID!
  inputSchema: InputSchemaData
  name: String!
  outputSchema: OutputSchemaData
  owner: UserData
  ownerId: Int!
  ranking: Int
  shortDescription: String
  slug: String!
  thumbnailUrl: String
  toolMetadata: ToolMetadataData
  toolType: ToolType!
  updatedAt: DateTime!
  verifiedBySuperAdmin: Boolean!
  visibility: VisibilityType!
}

type ToolMetadata {
  data: ToolMetadataData
  error: GraphQLError
  pagination: Pagination
}

type ToolMetadataData {
  createdAt: DateTime!
  description: String!
  id: ID!
  keywords: String
  ogDescription: String
  ogImageUrl: String
  ogTitle: String
  title: String!
  toolId: Int!
  updatedAt: DateTime!
}

enum ToolType {
  CURD
  IO
}

enum ToolUserType {
  ADVERTISING_SPECIALIST
  AI_RESEARCHER
  ANIMATOR
  BRAND_MANAGER
  BUSINESS_ANALYST
  BUSINESS_OWNER
  CLOUD_ENGINEER
  CONSULTANT
  CONTENT_CREATOR
  COPYWRITER
  CUSTOMER_SUPPORT_AGENT
  CYBERSECURITY_SPECIALIST
  DATA_SCIENTIST
  DESIGNER
  DEVELOPER
  DEVOPS_ENGINEER
  DIGITAL_MARKETER
  EDUCATOR
  ENTREPRENEUR
  FINANCE_PROFESSIONAL
  GAMER
  GRAPHIC_DESIGNER
  HEALTHCARE_PROFESSIONAL
  HOBBYIST
  HR_PROFESSIONAL
  IT_PROFESSIONAL
  LEGAL_PROFESSIONAL
  MACHINE_LEARNING_ENGINEER
  MARKETER
  MUSIC_PRODUCER
  OPERATIONS_MANAGER
  OTHER
  PRODUCT_MANAGER
  PROJECT_MANAGER
  QA_ENGINEER
  RESEARCHER
  SALES_PROFESSIONAL
  SEO_SPECIALIST
  SOCIAL_MEDIA_MANAGER
  SOFTWARE_ENGINEER
  STRATEGY_PLANNER
  STUDENT
  TEACHER
  TRAINER
  UX_UI_DESIGNER
  VIDEO_EDITOR
  WRITER
}

input TravelBudgetCalculatorInput {
  accomodationType: String!
  date: DateTime!
  numberOfDays: Float!
  purpose: String!
  startCity: String!
  startCountry: String!
  travelCity: String!
  travelCountry: String!
  travelStyle: String!
}

input TravelChecklistGeneratorInput {
  date: DateTime!
  destinationCity: String!
  destinationCountry: String!
  purpose: String!
  startCity: String!
  startCountry: String!
  travelActivities: [String!]!
  travelCompanionType: String!
  travelDuration: String!
  travelType: String!
}

input TravelDestinationFinderInput {
  date: DateTime!
  purpose: String!
  startCity: String!
  startCountry: String!
  travelActivities: [String!]!
  travelBudgetUSD: String!
  travelCompanionType: String!
  travelDuration: String!
  travelType: String!
}

input UpdateInputSchema {
  id: Float!
  schema: String!
  toolId: Float
}

input UpdateListedAiToolInput {
  aiCapabilities: [AiCapability!]
  aiType: [AiType!]
  delivery: [Delivery!]
  domains: [Domain!]
  featured: Boolean
  features: [String!]
  id: Int!
  integrationOptions: [IntegrationOption!]
  keywords: [String!]
  listedBy: ListedBy
  logoUrl: String
  modalities: [Modality!]
  name: String
  ownerEmail: String
  platforms: [PlatformType!]
  popularityScore: Int
  pricingType: [PricingType!]
  productType: [ProductType!]
  publishedAt: DateTime
  shortDescription: String
  toolUserTypes: [ToolUserType!]
  useCases: [String!]
  usps: [String!]
  verified: Boolean
  videoUrl: String
  websiteUrl: String
}

input UpdateToolInput {
  description: String
  handle: String
  id: Int!
  name: String
  ownerId: Int
  ranking: Int = 0
  shortDescription: String
  slug: String
  thumbnailUrl: String
  toolType: String = "IO"
  verifiedBySuperAdmin: Boolean = false
  visibility: String = "PUBLIC"
}

input UpdateToolMetaDataDto {
  description: String
  id: Float!
  keywords: String
  ogDescription: String
  ogImageUrl: String
  ogTitle: String
  title: String
  toolId: Float
}

input UpdateUserInput {
  altPhoneNumber: String
  dateOfBirth: DateTime
  email: String
  fullName: String
  gender: GenderType
  id: Int!
  phoneNumber: String
  profilePicture: String
  userType: UserType = USER
  username: String
}

type User {
  data: UserData
  error: GraphQLError
  pagination: Pagination
}

type UserData {
  altPhoneNumber: String
  createdAt: DateTime!
  dateOfBirth: DateTime
  email: String!
  fullName: String!
  gender: GenderType
  hashedRefreshToken: String
  id: ID!
  isVerified: Boolean!
  passwordHash: String
  phoneNumber: String
  profilePicture: String
  tools: [ToolData!]
  updatedAt: DateTime!
  userType: UserType!
  username: String!
}

enum UserType {
  ADMIN
  CREATOR
  USER
}

type UsersAndToken {
  email: String!
  fullName: String!
  id: ID!
  token: Token!
  userType: String!
}

type UsersHostelIdAndToken {
  token: Token!
  user: UserData!
}

input VerifyEmailInput {
  token: String!
}

type VerifyEmailResponse {
  id: Float!
}

enum VisibilityType {
  PRIVATE
  PUBLIC
}