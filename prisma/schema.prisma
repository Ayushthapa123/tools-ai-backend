//! Starting a entity name with capital letter caused unknown bug. when i put MonthlyPricing inside hostel
//! it was giving null while there was a data. but changing name to monthlyPricing solved this
generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = "postgres://avnadmin:AVNS_9cDlvhPmbji0zGcLxc8@hosteladmin-db-hosteladmin.j.aivencloud.com:11809/defaultdb?sslmode=require"
}

model Users {
  userId             Int      @id @unique @default(autoincrement())
  hostelId      Int?     @unique //this needs to be included when creatng token. 

  email              String   @unique
  passwordHash       String?
  fullName           String
 
  profilePicture     String?
  phoneNumber        String?
  hashedRefreshToken String?     

  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  userPlan           SubscriptionPlans  @default(FREE)


  isVerified Boolean  @default(false)
  userType   UserType @default(STUDENT)

  hostel     Hostel?
}

model Hostel {
  hostelId    Int     @id @unique @default(autoincrement())
  name        String
  verified    Boolean @default(false)
  reviewed    Boolean @default(false)
  ranking     Int? @default(0)
  genderType  GenderType
  hostelType  HostelType @default(STAY)

  capacity    Int?

  description String?
  slug        String  @unique
  whatsappId  String?
  telegramId  String?
  userId      Int?     @unique//! hostel don't need to have userId


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner            Users?             @relation(fields: [userId], references: [userId])

  roomAvailability RoomAvailability?
  dailyPricing     DailyPricing?


  socials        Socials?
  address        Address?
  contact        ContactDetails?
  hostelSettings        HostelSettings?


  monthlyPricing MonthlyPricing?
  amenities      Amenities?
  services       Services?
  hostelRules    HostelRules?

  // orders    Orders[]
  // payments  Payments[]
  gallery   Gallery[]
  nearbyPlaces    NearbyPlace[]
  // suppliers HostelSuppliers[]

  @@index([hostelId,slug])
}






model MonthlyPricing {
  monthlyPricingId Int      @id @unique @default(autoincrement())
   oneSeater      Int?
  twoSeater      Int?
  threeSeater    Int?
  fourSeater     Int?
  fiveSeater     Int?
  attachBathroom Int?
  deposite       Int?
  admission      Int?
  createdAt   DateTime @default(now())

  updatedAt        DateTime @updatedAt
  hostelId         Int      @unique

  hostel Hostel? @relation(fields: [hostelId], references: [hostelId])
}

model DailyPricing {
  dailyPricingId Int      @id @unique @default(autoincrement())
  oneSeater      Int?
  twoSeater      Int?
  threeSeater    Int?
  fourSeater     Int?
  fiveSeater     Int?
  attachBathroom Int?
  createdAt   DateTime @default(now())

  updatedAt      DateTime @updatedAt
  hostelId       Int      @unique

  // Define a relation to Hostel
  hostel Hostel? @relation(fields: [hostelId], references: [hostelId])
}

model RoomAvailability {
  roomAvailabilityId Int      @id @unique @default(autoincrement())
  oneSeater          Boolean?
  twoSeater          Boolean?
  threeSeater        Boolean?
  fourSeater         Boolean?
  fiveSeater         Boolean?
  attachBathroom     Boolean?
  createdAt   DateTime @default(now())

  updatedAt          DateTime @updatedAt
  hostelId           Int      @unique

  // Define a relation to Hostel
  hostel Hostel? @relation(fields: [hostelId], references: [hostelId])
}

model Gallery {
  galleryId Int     @id @unique @default(autoincrement())
  type      GalleryType @default(ROOM)
  caption   String?// Like Room no1, Room No2, 
  url       String

  createdAt   DateTime @default(now())
  updatedAt          DateTime @updatedAt

  hostelId  Int     



  // Define a relation to Hostel
  hostel Hostel? @relation(fields: [hostelId], references: [hostelId])

  @@index([hostelId])
}

model Socials {
  socialsId Int     @id @unique @default(autoincrement())
  instaGram String?
  facebook  String?
  tiktok    String?
  map       String?
  youTube   String?
  hostelId  Int     @unique

  createdAt   DateTime @default(now())
  updatedAt          DateTime @updatedAt
  hostel    Hostel? @relation(fields: [hostelId], references: [hostelId])

  // Define a relation to Hostel
}

model Address {
  addressId Int      @id @unique @default(autoincrement())
  country   String
  city      String?
  subCity      String?
  street    String?
  createdAt   DateTime @default(now())

  updatedAt DateTime @updatedAt
  hostelId  Int @unique
  hostel    Hostel?  @relation(fields: [hostelId], references: [hostelId])
}

model SearchQueries {
  //get created when user enters his hostel address/create/update. if already present don't create else create
//create two searchQueries for each hostel with tole and without tole. 
  //if queryType is tole it will have city and country as well
  //when searching back hostel. if tole present search on tole else search on city
  searchQueryId Int      @id @unique @default(autoincrement())
  country   String
  city      String
  subCity      String?  

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}


model ContactDetails {
  contactId Int      @id @unique @default(autoincrement())
  phone     String
  altPhone  String?
  email     String

  createdAt   DateTime @default(now())
  updatedAt DateTime @updatedAt

  hostelId  Int @unique

  // Define a relation to Hostel
  hostel Hostel?  @relation(fields: [hostelId], references: [hostelId])
}

model HostelSettings {
  hostelSettingId Int @id @unique @default(autoincrement())
  currency     String?
  fontSize     Int @default(14)
  active       Boolean  @default(true) // make false if no activity in past 30 days
  deActivate       Boolean  @default(false) // make false if no activity in past 30 days

  visibility   VisibilityType @default(ALL) // Who Can See your hostel info? ALL, STUDENTS, ONLY_ME
  allowBooking Boolean @default(false) 
  allowComments Boolean @default(false)
  allowPrivateFeedbacks Boolean @default(false)
  allowMessages Boolean @default(false)


  allowRating Boolean @default(false)
  badges       Badges[] @default([]) //different badges for hostels 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  hostelId  Int @unique
  // Define a relation to Hostel
  hostel Hostel?  @relation(fields: [hostelId], references: [hostelId])


}

model NearbyPlace {
  nearbyPlaceId   Int             @id @unique @default(autoincrement())
  name            String
  description     String
  hostelId        Int
  hostel          Hostel          @relation(fields: [hostelId], references: [hostelId])
}


model Amenities {
  amenitiesId    Int             @id @unique @default(autoincrement())
  hostelId       Int             @unique 
  amenities      String     

  hostel Hostel?  @relation(fields: [hostelId], references: [hostelId])

}

model Services {
  servicesId    Int             @id @unique @default(autoincrement())
  hostelId       Int             @unique 
  amenities      String     

  hostel Hostel?  @relation(fields: [hostelId], references: [hostelId])

}

model HostelRules {
  rulesId    Int             @id @unique @default(autoincrement())
  hostelId       Int             @unique 
  rules      String     

  hostel Hostel?  @relation(fields: [hostelId], references: [hostelId])

}


model SHostels {
  sHostelsId      Int  @id @unique @default(autoincrement())
  name            String
  slug            String @unique
  description     String? 
  email           String? 
  contact         String?
  hostelType      HostelType?  @default(STAY)
  genderType      GenderType?  

  ranking        Int? @default(1)


  country         String 
  city            String 
  subCity         String? 
  street          String?
  imgUrl          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([slug,sHostelsId])

}

//Enums 
enum UserType {
  STUDENT
  HOSTEL_OWNER
  SUPPLIERS
  OTHERS
}

enum GenderType {
  BOYS
  GIRLS
  BOTH
}
enum HostelType {
  STAY
  TRAVELS
  BOTH
}
enum StayHostelCategories {
  COLLEGE_HOSTEL 
  SCHOOL_HOSTEL 
  PRIVATE_HOSTEL 
  PROFESSIONAL_HOSTEL 
  TRAINING_HOSTEL 
  BOARDING_HOSTEL
  KIDS_HOSTEL 
  ADULTS_ONLY_HOSTEL 
  BUDGET_FRIENDLY 
  PREMIUM

}

enum TravelHostelCategories {
  BUDGET_FRIENDLY 
  PREMIUM 
  PARTY 
  YOUTH 
  ECO_FRIENDLY 
  UNIQUELY_THEMED 
  TOURIST_ONLY 
  COMMUNITY_BASED

}
// Hostel categories. NO need to create schema. just create array of object in frontend.
enum VisibilityType {
  ALL 
  STUDENTS_ONLY 
  ONLY_ME
}

enum GalleryType {
  PROFILE//no need
  COVER
  ROOM 
  BATHROOM 
  BUILDING 
  KITCHEN 
  CELEBRATIONS
  REVIEW
  FOOD
  OTHER 
  LOGO
}


enum SubscriptionPlans {
  FREE
  PRO
  PREMIUM
}

enum DataSources {
  OWNER
  GOOGLE
  FACEBOOK 
  SCRAPPED
  OTHERS
}
enum Badges {
  NEW
  PEOPLES_CHOICE 
  FAMOUS 
  GOOD_FOOD 
  GOOD_LOCATION
  SOCIAL_BUTTERFLY 
  TECH_SAVVY
}

//!for advertisement 

// model Advertisement {
//   adId           Int       @id @unique @default(autoincrement())
//   adPlanId       Int       @unique
//   startDate      DateTime
//   endDate        DateTime?
//   createdAt      DateTime  @default(now())
//   budgetedAmount Float
//   paymentStatus  Boolean

//   // Define a relation to AdPlan
//   adPlan AdPlan? @relation(fields: [adPlanId], references: [adPlanId])
// }

// model AdPlan {
//   adPlanId      Int            @id @unique @default(autoincrement())
//   name          String
//   cost          Float
//   description   String?
//   features      String[]
//   createdAt     DateTime       @default(now())
//   updatedAt     DateTime       @updatedAt
//   advertisement Advertisement? // One-to-one relationship 
//   payments      Payments[]
// }

// model Payments {
//   paymentId Int      @id @unique @default(autoincrement())
//   adPlanId  Int
//   hostelId  Int
//   createdAt DateTime @default(now())

//   // Define relations to other models
//   adPlan AdPlan @relation(fields: [adPlanId], references: [adPlanId])
//   hostel Hostel @relation(fields: [hostelId], references: [hostelId])
// }


//!for ecommerce  

// model Orders {
//   orderId         Int      @id @unique @default(autoincrement())
//   productId       Int
//   hostelId        Int
//   orderNumber     Int
//   quantity        Int
//   discountPercent Int?
//   totalPrice      Float
//   createdAt       DateTime @default(now())
//   shippingDate    DateTime
//   notes           String?

//   // Define a relation to Hostel
//   hostel Hostel @relation(fields: [hostelId], references: [hostelId])
// }

// model Product {
//   productId   Int      @id @unique @default(autoincrement())
//   name        String
//   photo       String?
//   description String?
//   categoryId  Int
//   supplierId  Int
//   stockSize   Int?
//   size        String?
//   color       String?
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt

//   // Define a relation to Suppliers
//   supplier Suppliers @relation(fields: [supplierId], references: [supplierId])
// }

// model Category {
//   categoryId  Int     @id @unique @default(autoincrement())
//   name        String
//   photo       String?
//   description String?
// }

// model Suppliers {
//   supplierId  Int      @id @unique @default(autoincrement())
//   name        String
//   companyName String
//   fullAddress   String
//   phone        String 
//   altPhone     String?
//   email        String
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt

//   // Define a relation to Products
//   products Product[]
//   hostel   HostelSuppliers[]
// }

// model HostelSuppliers {
//   supplierId         Int      @id @default(autoincrement())
//   hostelId   Int
//   createdAt  DateTime @default(now())

//   hostel   Hostel    @relation(fields: [hostelId], references: [hostelId])
//   supplier Suppliers @relation(fields: [supplierId], references: [supplierId])

//   @@unique([hostelId, supplierId])
// }

