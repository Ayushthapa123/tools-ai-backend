
generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://doadmin:AVNS_WQ0Ldj4nooqC9lH2QoZ@db-postgresql-nyc3-42616-do-user-16385499-0.c.db.ondigitalocean.com:25060/defaultdb?sslmode=require"
}

// Define the Users model
model Users {
  userId             Int      @id @unique @default(autoincrement())
  email              String   @unique
  passwordHash       String?
  fullName           String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  profilePicture     String?
  phoneNumber        String?
  hashedRefreshToken String?
  verified    Boolean @default(false)


  hostelId      Int?     @unique


  isVerified Boolean  @default(false)
  userType   UserType @default(STUDENT)
  hostel     Hostel?
}

model Hostel {
  hostelId    Int     @id @unique @default(autoincrement())
  name        String
  verified    Boolean @default(false)
  genderType  GenderType
  hostelType  HostelType @default(STAY)
  capacity    Int?
  currencyId  Int?

  description String?
  slug        String  @unique
  whatsappId  String?
  telegramId  String?
  userId      Int?     @unique//! hostel don't need to have userId


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Define a relation to Users
  owner            Users?             @relation(fields: [userId], references: [userId])

  // Define relations to other models
  roomAvailability RoomAvailability?
  dailyPricing     DailyPricing?

  socials        Socials?
  address        Address?
  contact        ContactDetails?


  MonthlyPricing MonthlyPricing?

  orders    Orders[]
  payments  Payments[]
  gallery   Gallery[]
  suppliers HostelSuppliers[]

  @@index([userId,hostelId,slug])
}
model HostelFeatures {
  hostelFeatureId Int     @id @unique @default(autoincrement())
  name            String
  emojiUrl        String?
  type             String?
}

model HostelRules {
  hostelRulesId Int     @id @unique @default(autoincrement())
  name            String
  description     String?

}

model Orders {
  orderId         Int      @id @unique @default(autoincrement())
  productId       Int
  hostelId        Int
  orderNumber     Int
  quantity        Int
  discountPercent Int?
  totalPrice      Float
  createdAt       DateTime @default(now())
  shippingDate    DateTime
  notes           String?

  // Define a relation to Hostel
  hostel Hostel @relation(fields: [hostelId], references: [hostelId])
}

model Product {
  productId   Int      @id @unique @default(autoincrement())
  name        String
  photo       String?
  description String?
  categoryId  Int
  supplierId  Int
  stockSize   Int?
  size        String?
  color       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Define a relation to Suppliers
  supplier Suppliers @relation(fields: [supplierId], references: [supplierId])
}

model Category {
  categoryId  Int     @id @unique @default(autoincrement())
  name        String
  photo       String?
  description String?
}

model Suppliers {
  supplierId  Int      @id @unique @default(autoincrement())
  name        String
  companyName String
  fullAddress   String
  phone        String 
  altPhone     String?
  email        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Define a relation to Products
  products Product[]
  hostel   HostelSuppliers[]
}

model HostelSuppliers {
  supplierId         Int      @id @default(autoincrement())
  hostelId   Int
  createdAt  DateTime @default(now())

  hostel   Hostel    @relation(fields: [hostelId], references: [hostelId])
  supplier Suppliers @relation(fields: [supplierId], references: [supplierId])

  @@unique([hostelId, supplierId])
}

model Advertisement {
  adId           Int       @id @unique @default(autoincrement())
  adPlanId       Int       @unique
  startDate      DateTime
  endDate        DateTime?
  createdAt      DateTime  @default(now())
  budgetedAmount Float
  paymentStatus  Boolean

  // Define a relation to AdPlan
  adPlan AdPlan? @relation(fields: [adPlanId], references: [adPlanId])
}

model AdPlan {
  adPlanId      Int            @id @unique @default(autoincrement())
  name          String
  cost          Float
  description   String?
  features      String[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  advertisement Advertisement? // One-to-one relationship 
  payments      Payments[]
}

model Payments {
  paymentId Int      @id @unique @default(autoincrement())
  adPlanId  Int
  hostelId  Int
  createdAt DateTime @default(now())

  // Define relations to other models
  adPlan AdPlan @relation(fields: [adPlanId], references: [adPlanId])
  hostel Hostel @relation(fields: [hostelId], references: [hostelId])
}

model MonthlyPricing {
  monthlyPricingId Int      @id @unique @default(autoincrement())
   oneSeater      Int?
  twoSeater      Int?
  threeSeater    Int?
  fourSeater     Int?
  fiveSeater     Int?
  attachBathroom Int?
  deposite       Int?
  admission      Int?
  createdAt   DateTime @default(now())

  updatedAt        DateTime @updatedAt
  hostelId         Int      @unique

  // Define a relation to Hostel
  hostel Hostel? @relation(fields: [hostelId], references: [hostelId])
}

model DailyPricing {
  dailyPricingId Int      @id @unique @default(autoincrement())
  oneSeater      Int?
  twoSeater      Int?
  threeSeater    Int?
  fourSeater     Int?
  fiveSeater     Int?
  attachBathroom Int?
  createdAt   DateTime @default(now())

  updatedAt      DateTime @updatedAt
  hostelId       Int      @unique

  // Define a relation to Hostel
  hostel Hostel? @relation(fields: [hostelId], references: [hostelId])
}

model RoomAvailability {
  roomAvailabilityId Int      @id @unique @default(autoincrement())
  oneSeater          Boolean?
  twoSeater          Boolean?
  threeSeater        Boolean?
  fourSeater         Boolean?
  fiveSeater         Boolean?
  attachBathroom     Boolean?
  createdAt   DateTime @default(now())

  updatedAt          DateTime @updatedAt
  hostelId           Int      @unique

  // Define a relation to Hostel
  hostel Hostel? @relation(fields: [hostelId], references: [hostelId])
}

model Gallery {
  galleryId Int     @id @unique @default(autoincrement())
  type      GalleryType @default(ROOM)
  caption   String?
  url       String

  createdAt   DateTime @default(now())
  updatedAt          DateTime @updatedAt

  hostelId  Int     



  // Define a relation to Hostel
  hostel Hostel? @relation(fields: [hostelId], references: [hostelId])

  @@index([hostelId])
}

model Socials {
  socialsId Int     @id @unique @default(autoincrement())
  instaGram String?
  facebook  String?
  tiktok    String?
  map       String?
  youTube   String?
  hostelId  Int     @unique

  createdAt   DateTime @default(now())
  updatedAt          DateTime @updatedAt
  hostel    Hostel? @relation(fields: [hostelId], references: [hostelId])

  // Define a relation to Hostel
}

model Address {
  addressId Int      @id @unique @default(autoincrement())
  country   String
  district  String?
  city      String?
  tole      String?
  street    String?
  createdAt   DateTime @default(now())

  updatedAt DateTime @updatedAt
  hostelId  Int @unique
  hostel    Hostel?  @relation(fields: [hostelId], references: [hostelId])
}

model ContactDetails {
  contactId Int      @id @unique @default(autoincrement())
  phone     String
  altPhone  String?
  email     String
  createdAt   DateTime @default(now())

  updatedAt DateTime @updatedAt
  hostelId  Int @unique

  // Define a relation to Hostel
  hostel Hostel?  @relation(fields: [hostelId], references: [hostelId])
}

//Enums 
enum UserType {
  STUDENT
  HOSTEL_OWNER
  SUPPLIERS
  OTHERS
}

enum GenderType {
  BOYS
  GIRLS
  BOTH
}
enum HostelType {
  STAY
  TRAVELS
  BOTH
}

enum GalleryType {
  PROFILE//no need
  COVER
  ROOM 
  BATHROOM 
  BUILDING 
  KITCHEN 
  CELEBRATIONS
  REVIEW
  FOOD
  OTHER
}

