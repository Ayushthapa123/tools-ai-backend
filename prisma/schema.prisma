//! Starting a entity name with capital letter caused unknown bug. when i put MonthlyPricing inside hostel
//! it was giving null while there was a data. but changing name to monthlyPricing solved this
generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int      @id @unique @default(autoincrement())
  hostelId      Int?      //this needs to be included when creatng token. 
  email              String   @unique
  passwordHash       String?
  fullName           String
  profilePicture     String?
  phoneNumber        String?
  altPhoneNumber     String?
  hashedRefreshToken String?     
  city               String? 
  dateOfBirth        DateTime?
  gender             GenderType?
  userType   UserType @default(HOSTEL_OWNER)
  booking    Booking[]

  isVerified Boolean  @default(false)

  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt 
  deletedAt DateTime?

  hostel     Hostel?

  @@index([email])
}

model HostelGuest {
  id                Int      @id @unique @default(autoincrement())

  hostelId          Int      // Required relation to Hostel
  hostel            Hostel   @relation(fields: [hostelId], references: [id]) 

  roomId            Int?     // Optional relation to Room
  room              Room?    @relation(fields: [roomId], references: [id])
  
  // Basic Information
  fullName          String
  email             String // This will be used for validatin as well as for getting Past Checkin/Checkout History
  phoneNumber       String?
  emergencyContact  String?
  gender            GenderType?
  dateOfBirth       DateTime?
  
  // Guest specific information
  nationality       String? 
  permanentAddress  String? 
  religion          String?
  occupation        String?

  isEditable Boolean @default(true)
  // Visit history
  checkinDate     DateTime?
  checkoutDate    DateTime?
  
  // Additional notes
  notes             String?
  profilePicture    String?
  
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@index([hostelId])
  @@index([email])
  @@index([phoneNumber])
}

model Hostel {
  id         Int     @id @unique @default(autoincrement())
  name        String
  description String?
  slug        String  @unique
  ranking     Int? @default(0)
  genderType  HostelGenderType @default(BOTH)
  hostelType  HostelType @default(STAY) 

  ownerId     Int @unique

  whatsappId  String?
  telegramId  String?

  verifiedBySuperAdmin    Boolean @default(false) 
  verifiedByCommunityOwner    Boolean @default(false)

  owner            User?             @relation(fields: [ownerId], references: [id])

  social        Social?
  address        Address?
  contact        ContactDetail?
  hostelSettings        HostelSetting?

  // monthlyPricing MonthlyPricing?
  amenities      Amenities?
  service       Service?
  hostelRules    HostelRules?

  // orders    Orders[]
  // payments  Payments[]
  gallery   Gallery[]
  rooms     Room[]
  nearbyPlaces    NearbyPlace[]
  // suppliers HostelSuppliers[]

  foodMenu FoodMenu[]
  hostelGuests HostelGuest[]  // Added relation to HostelGuest

  // Single field to track onboarding completion
  hasOnboardingComplete Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
  deletedAt DateTime?
  @@index([id,slug])
  
  @@index([name])
  @@index([genderType])
  @@index([hostelType])
  @@index([verifiedBySuperAdmin])
  @@index([createdAt])
  @@index([hasOnboardingComplete])
}
model Room {
  id             Int          @id @unique @default(autoincrement())
  status         RoomStatus
  capacity       RoomCapacity
  attachBathroom Boolean?
  hostelId     Int

  caption        String
  description    String?
  roomNumber     String?
  maxOccupancy   String?
  booking        Booking[]
  price          Price?
  dynamicPricingRule DynamicPricingRule[]
  roomAmenityId Int?
  roomAmenity RoomAmenity?
  hostel       Hostel     @relation(fields: [hostelId], references: [id])
  image          RoomImage[]

  hostelGuest HostelGuest[]

  @@index([hostelId])
  @@index([status])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model RoomImage {
  id        Int      @id @unique @default(autoincrement())
  caption   String?
  url       String
  roomId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  room      Room     @relation(fields: [roomId], references: [id],onDelete: Cascade)

  @@index([id])
}

// Not being used now
model Booking {
  id          Int           @id @unique @default(autoincrement())
  roomId      Int
  guestId     Int
  startDate   DateTime
  endDate     DateTime
  status      BookingStatus
  paymentPlatformName PaymentPlatformName @default(STRIPE)
 
  bookingKey  String        // This is common for booking done at the same time
  guest       User          @relation(fields: [guestId], references: [id])
  room        Room          @relation(fields: [roomId], references: [id],onDelete: Cascade) 
  // transaction Transaction[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([id, bookingKey])
  @@index([startDate, endDate])
  @@index([status])
  @@index([guestId])
  @@index([roomId])
  @@index([createdAt])
}

model Price {
  id               Int           @id @unique @default(autoincrement())
  baseAmountPerDay       Int?     
  baseAmountPerMonth     Int     
  currency         Currency 
  isDynamicPricing Boolean @default(false) 

  roomId           Int           @unique
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  discountAmount   Int?
  discountType     DiscountType?
  isDiscountActive Boolean       @default(false)
  room             Room          @relation(fields: [roomId], references: [id],onDelete:Cascade)

  @@index([roomId])
  @@index([isDynamicPricing])
  @@index([isDiscountActive])
}

// Only for daily based pricing in Travel Hostel
model DynamicPricingRule {
  id Int @id @unique @default(autoincrement())
  name String
  description String?
  roomId Int   
  startDate DateTime
  endDate DateTime
  amount Int  
  isWeekend Boolean @default(false)  // apply this rule on weekend
  isActive Boolean @default(true)
  priority Int @default(0)
  room Room @relation(fields: [roomId], references: [id],onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([roomId, startDate, endDate])
}
model RoomAmenity {
  id       Int @id @unique @default(autoincrement())
  amenity  Json
  roomId   Int @unique
  room Room @relation(fields: [roomId], references: [id],onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}



model Gallery {
  id        Int     @id @unique @default(autoincrement())
  hostelId  Int     

  type      GalleryType @default(ROOM)
  caption   String?// Like Room no1, Room No2, 
  url       String
  isSelected Boolean @default(false)


  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Define a relation to Hostel
  hostel Hostel @relation(fields: [hostelId], references: [id])

  @@index([hostelId])
}

model Social {
  id        Int     @id @unique @default(autoincrement())
  instaGram String?
  facebook  String?
  tiktok    String?
  map       String?
  youTube   String?
  hostelId  Int     @unique

  createdAt   DateTime @default(now())
  updatedAt          DateTime @updatedAt
  hostel    Hostel @relation(fields: [hostelId], references: [id])

  // Define a relation to Hostel
}

model Address {
  id Int      @id @unique @default(autoincrement())
  country   String
  city      String
  subCity      String?
  street    String? 
  latitude    Float?
  longitude   Float?

  hostelId  Int @unique
  createdAt   DateTime @default(now())
  updatedAt DateTime @updatedAt
  hostel    Hostel  @relation(fields: [hostelId], references: [id])
}

model SearchQuery {
  //get created when user enters his hostel address/create/update. if already present don't create else create
//create two searchQueries for each hostel with tole and without tole. 
  //if queryType is tole it will have city and country as well
  //when searching back hostel. if tole present search on tole else search on city
  id Int      @id @unique @default(autoincrement())
  country   String
  city      String
  subCity      String?  

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([city, country])
}


model ContactDetail {
  id        Int      @id @unique @default(autoincrement())
  phone     String
  altPhone  String?
  email     String

  hostelId  Int @unique

  createdAt   DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Define a relation to Hostel
  hostel Hostel  @relation(fields: [hostelId], references: [id])
}

model HostelSetting {
  id Int @id @unique @default(autoincrement())
  currency     String?
  fontSize     Int @default(14)
  active       Boolean  @default(true) // make false if no activity in past 30 days
  deActivate       Boolean  @default(false) // make false if no activity in past 30 days

  visibility   VisibilityType @default(ALL) // Who Can See your hostel info? ALL, STUDENTS, ONLY_ME
  allowBooking Boolean @default(false) 
  allowComments Boolean @default(false)
  allowPrivateFeedbacks Boolean @default(false)
  allowMessages Boolean @default(false)


  allowRating Boolean @default(false)
  badges       Badges[] @default([]) //different badges for hostels 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  hostelId  Int @unique
  // Define a relation to Hostel
  hostel Hostel  @relation(fields: [hostelId], references: [id])


}

model NearbyPlace {
  id   Int             @id @unique @default(autoincrement())
  name            String
  description     String
  hostelId        Int
  hostel          Hostel          @relation(fields: [hostelId], references: [id])
}


model Amenities {
  id    Int             @id @unique @default(autoincrement())
  hostelId       Int             @unique 
  amenities      Json     

  hostel Hostel?  @relation(fields: [hostelId], references: [id])

}

model Service {
  id    Int             @id @unique @default(autoincrement())
  hostelId       Int             @unique 
  services      Json     

  hostel Hostel  @relation(fields: [hostelId], references: [id])

}

model HostelRules {
  id             Int             @id @unique @default(autoincrement())
  hostelId       Int             @unique 
  rules          Json

  hostel Hostel  @relation(fields: [hostelId], references: [id])
}

model FoodMenu{
  id Int    @id @unique @default(autoincrement())
  day        WeekDays 
  lunch      String?
  dinner     String?
  snacks     String?
  lunchTime  String?
  snacksTime String?
  dinnerTime String?

  hostelId Int

  // Define a relation to Hostel
  hostel Hostel @relation(fields: [hostelId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@index([hostelId, day])
}


model AmenityOption {
  id Int @id @unique @default(autoincrement()) 
  name String 
  iconUrl String? 
  description String?
  hostelAmenityType HostelAmenityType
}

model RoomAmenityOption {
  id Int @id @unique @default(autoincrement()) 
  name String 
  iconUrl String? 
  description String?
}

model ServiceOption {
  id Int @id @unique @default(autoincrement()) 
  name String 
  iconUrl String? 
  description String?
}

enum HostelAmenityType {
  PROPERTY_ESSENTIALS
  ROOM_ESSENTIALS 
  BATHROOM_ESSENTIALS
  KITCHEN_ESSENTIALS
  SAFETY_AND_HYGENE_ESSENTIALS
  OTHER
}

//Enums 
enum UserType {
  STUDENT
  HOSTEL_OWNER
  SUPPLIERS 
  SUPERADMIN
  COMMUNITY_OWNER
  OTHERS
}

enum GenderType {
  BOYS
  GIRLS
  OTHERS
}

enum HostelGenderType {
  BOYS
  GIRLS
  BOTH
}

enum HostelType {
  STAY
  TRAVELS 
  PG
  BOTH
}
enum StayHostelCategories {
  COLLEGE_HOSTEL 
  SCHOOL_HOSTEL 
  PRIVATE_HOSTEL 
  PROFESSIONAL_HOSTEL 
  TRAINING_HOSTEL 
  BOARDING_HOSTEL
  KIDS_HOSTEL 
  ADULTS_ONLY_HOSTEL 
  BUDGET_FRIENDLY 
  PREMIUM

}

enum TravelHostelCategories {
  BUDGET_FRIENDLY 
  PREMIUM 
  PARTY 
  YOUTH 
  ECO_FRIENDLY 
  UNIQUELY_THEMED 
  TOURIST_ONLY 
  COMMUNITY_BASED

}
// Hostel categories. NO need to create schema. just create array of object in frontend.
enum VisibilityType {
  ALL 
  STUDENTS_ONLY 
  ONLY_ME
}

enum GalleryType {
  PROFILE//no need
  COVER
  ROOM 
  BATHROOM 
  BUILDING 
  KITCHEN 
  CELEBRATIONS
  REVIEW
  FOOD
  OTHER 
  LOGO
}


enum SubscriptionPlans {
  FREE
  PRO
  PREMIUM
}

enum DataSources {
  OWNER
  GOOGLE
  FACEBOOK 
  SCRAPPED
  OTHERS
}
enum Badges {
  NEW
  PEOPLES_CHOICE 
  FAMOUS 
  GOOD_FOOD 
  GOOD_LOCATION
  SOCIAL_BUTTERFLY 
  TECH_SAVVY
}

enum WeekDays {
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

enum RoomStatus {
  IDLE
  AVAILABLE
  BOOKED
  INACTIVE
}


enum RoomCapacity {
  ONE_BED
  TWO_BED
  THREE_BED
  FOUR_BED
  FIVE_BED
  SIX_BED
  SEVEN_BED
  EIGHT_BED
  MULTI_BED
} 

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum Currency {
  NPR
  USD
}

enum PaymentPlatformName {
  STRIPE
  ESEWA
  KHALTI
}

enum DiscountType {
  PERCENTAGE 
  FIXED
  
}

//!for advertisement 

// model Advertisement {
//   adId           Int       @id @unique @default(autoincrement())
//   adPlanId       Int       @unique
//   startDate      DateTime
//   endDate        DateTime?
//   createdAt      DateTime  @default(now())
//   budgetedAmount Float
//   paymentStatus  Boolean

//   // Define a relation to AdPlan
//   adPlan AdPlan? @relation(fields: [adPlanId], references: [adPlanId])
// }

// model AdPlan {
//   adPlanId      Int            @id @unique @default(autoincrement())
//   name          String
//   cost          Float
//   description   String?
//   features      String[]
//   createdAt     DateTime       @default(now())
//   updatedAt     DateTime       @updatedAt
//   advertisement Advertisement? // One-to-one relationship 
//   payments      Payments[]
// }

// model Payments {
//   paymentId Int      @id @unique @default(autoincrement())
//   adPlanId  Int
//   hostelId  Int
//   createdAt DateTime @default(now())

//   // Define relations to other models
//   adPlan AdPlan @relation(fields: [adPlanId], references: [adPlanId])
//   hostel Hostel @relation(fields: [hostelId], references: [hostelId])
// }


//!for ecommerce  

// model Orders {
//   orderId         Int      @id @unique @default(autoincrement())
//   productId       Int
//   hostelId        Int
//   orderNumber     Int
//   quantity        Int
//   discountPercent Int?
//   totalPrice      Float
//   createdAt       DateTime @default(now())
//   shippingDate    DateTime
//   notes           String?

//   // Define a relation to Hostel
//   hostel Hostel @relation(fields: [hostelId], references: [hostelId])
// }

// model Product {
//   productId   Int      @id @unique @default(autoincrement())
//   name        String
//   photo       String?
//   description String?
//   categoryId  Int
//   supplierId  Int
//   stockSize   Int?
//   size        String?
//   color       String?
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt

//   // Define a relation to Suppliers
//   supplier Suppliers @relation(fields: [supplierId], references: [supplierId])
// }

// model Category {
//   categoryId  Int     @id @unique @default(autoincrement())
//   name        String
//   photo       String?
//   description String?
// }

// model Suppliers {
//   supplierId  Int      @id @unique @default(autoincrement())
//   name        String
//   companyName String
//   fullAddress   String
//   phone        String 
//   altPhone     String?
//   email        String
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt

//   // Define a relation to Products
//   products Product[]
//   hostel   HostelSuppliers[]
// }

// model HostelSuppliers {
//   supplierId         Int      @id @default(autoincrement())
//   hostelId   Int
//   createdAt  DateTime @default(now())

//   hostel   Hostel    @relation(fields: [hostelId], references: [hostelId])
//   supplier Suppliers @relation(fields: [supplierId], references: [supplierId])

//   @@unique([hostelId, supplierId])
// }

