generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Define the Users model
model Users {
  userId              Int       @id @default(autoincrement()) @unique
  email               String    @unique
  passwordHash        String
  firstName           String
  lastName            String
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  profilePicture      String?
  phoneNumber         String?
  hashedRefreshToken  String? 
  isVerified          Boolean @default(false)
  userType            UserType    @default(STUDENT)

  hostel              Hostel?

}

model Hostel {
  hostelId            Int       @id @default(autoincrement()) @unique
  name                String
  email               String
  phone               String
  verified            Boolean   @default(false)
  genderType          String
  capacity            Int?
  description         String?
  slug                String   @unique
  whatsappId          String?
  telegramId          String?
  userId              Int       @unique
  addressId           Int       @unique
  contactId           Int       @unique

  roomAvailabilityId  Int?      @unique
  pricingId           Int?  @unique
  socialsId           Int?  @unique

  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  // Define a relation to Users
  owner               Users @relation(fields: [userId], references: [userId])
  // Define relations to other models
  roomAvailability    RoomAvailability? @relation(fields: [roomAvailabilityId], references: [roomAvailabilityId])
  pricing             Pricing?          @relation(fields: [pricingId], references: [pricingId])
  socials             Socials?          @relation(fields: [socialsId], references: [socialsId])
  address             Address           @relation(fields: [addressId], references: [addressId])
  contact             ContactDetails        @relation(fields: [contactId], references: [contactId])

  orders              Orders[]      
  payments            Payments[] 
  gallery             Gallery[]
  suppliers HostelSuppliers[]
}

model HostelFeatures {
  hostelFeatureId     Int       @id @default(autoincrement()) @unique
  name                String
  emojiUrl            String?

}

model Orders {
  orderId             Int       @id @default(autoincrement()) @unique
  productId           Int
  hostelId            Int
  orderNumber         Int
  quantity            Int
  discountPercent     Int?
  totalPrice          Float
  createdAt           DateTime  @default(now())
  shippingDate        DateTime
  notes               String?

  // Define a relation to Hostel
  hostel              Hostel   @relation(fields: [hostelId], references: [hostelId])
}

model Product {
  productId           Int       @id @default(autoincrement()) @unique
  name                String
  photo               String?
  description         String?
  categoryId          Int
  supplierId          Int
  stockSize           Int?
  size                String?
  color               String?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  // Define a relation to Suppliers
  supplier            Suppliers @relation(fields: [supplierId], references: [supplierId])
}

model Category {
  categoryId          Int       @id @default(autoincrement()) @unique
  name                String
  photo               String?
  description         String?
}

model Suppliers {
  supplierId          Int       @id @default(autoincrement()) @unique
  name                String
  companyName         String?
  addressId           Int
  contactId           Int
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  // Define a relation to Products
  products            Product[]
  hostel HostelSuppliers[]
}

model HostelSuppliers {
  id       Int    @id @default(autoincrement())
  hostelId Int
  supplierId Int
  createdAt DateTime @default(now())

  hostel    Hostel   @relation(fields: [hostelId], references: [hostelId])
  supplier  Suppliers @relation(fields: [supplierId], references: [supplierId])

  @@unique([hostelId, supplierId])
}

model Advertisement {
  adId                Int       @id @default(autoincrement()) @unique
  adPlanId            Int       @unique
  startDate           DateTime
  endDate             DateTime?
  createdAt           DateTime  @default(now())
  budgetedAmount      Float
  paymentStatus       Boolean

  // Define a relation to AdPlan
  adPlan              AdPlan? @relation(fields: [adPlanId],references: [adPlanId])
}

model AdPlan {
  adPlanId            Int       @id @default(autoincrement()) @unique
  name                String
  cost                Float
  description         String?
  features            String[]
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  advertisement       Advertisement?  // One-to-one relationship 
  payments           Payments[]
}


model Payments {
  paymentId           Int       @id @default(autoincrement()) @unique
  adPlanId            Int
  hostelId            Int
  createdAt           DateTime  @default(now())

  // Define relations to other models
  adPlan              AdPlan @relation(fields: [adPlanId],references: [adPlanId])
  hostel              Hostel @relation(fields: [hostelId],references: [hostelId])
}

model Pricing {
  pricingId           Int       @id @default(autoincrement()) @unique
  oneSeater           String?
  twoSeater           String?
  threeSeater         String?
  fourSeater          String?
  fiveSeater          String?
  attachBathroom      String?
  updatedAt           DateTime  @updatedAt

  // Define a relation to Hostel
  hostel              Hostel?
}

model RoomAvailability {
  roomAvailabilityId  Int       @id @default(autoincrement()) @unique
  oneSeater           String?
  twoSeater           String?
  threeSeater         String?
  fourSeater          String?
  fiveSeater          String?
  attachBathroom      String?
  updatedAt           DateTime  @updatedAt

  // Define a relation to Hostel
  hostel              Hostel?
}

model Gallery {
  galleryId           Int       @id @default(autoincrement()) @unique
  hostelId            Int
  type                String?
  caption             String?
  url                 String

  // Define a relation to Hostel
  hostel              Hostel? @relation(fields: [hostelId],references: [hostelId])
}

model Socials {
  socialsId           Int       @id @default(autoincrement()) @unique
  instaGram           String?
  facebook            String?
  tiktok              String?
  map                 String?
  youTube             String?

  // Define a relation to Hostel
  hostel              Hostel?
}

model Address {
  addressId           Int       @id @default(autoincrement()) @unique
  country             String
  district            String?
  city                String?
  street              String?
  updatedAt           DateTime  @updatedAt 
  hostel              Hostel?
}

model ContactDetails {
  contactId           Int       @id @default(autoincrement()) @unique
  phone               String
  altPhone            String?
  email               String?
  updatedAt           DateTime  @updatedAt

  // Define a relation to Hostel
  hostel              Hostel?
}



//Enums 
enum UserType {
  STUDENT 
  HOSTEL_OWNER
  SUPPLIERS
}